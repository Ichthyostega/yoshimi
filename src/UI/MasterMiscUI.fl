# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
header_name {.h} 
code_name {.cc}
comment {MasterUI.h} {not_in_source in_header
} 

comment {MasterUI.cc} {in_source not_in_header
} 

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2010, Alan Calvert

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of version 2 of the GNU General Public
License as published by the Free Software Foundation.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of the ZynAddSubFX original, modified January 2010
} {in_source in_header
} 

decl {\#include <string>} {public
} 

decl {using namespace std;} {public
} 

decl {\#include "ADnoteUI.h"} {public
} 

decl {\#include "SUBnoteUI.h"} {public
} 

decl {\#include "EffUI.h"} {public
} 

decl {\#include "VirKeyboardUI.h"} {public
} 

decl {\#include "ConfigUI.h"} {public
} 

decl {\#include "BankUI.h"} {public
} 

decl {\#include "PartUI.h"} {public
} 

decl {\#include "MicrotonalUI.h"} {public
} 

decl {\#include "PresetsUI.h"} {public
} 

decl {\#include "ParametersUI.h"} {public
} 

decl {\#include "ConsoleUI.h"} {public
} 

decl {\#include "Misc/Master.h"} {public
} 

class VUMeter {: {public Fl_Box}
} {
  Function {VUMeter(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {npart=-1;} {}
  }
  Function {init(int part_)} {} {
    code {// the "part_" parameters sets the part (if it is >=0), else it sets the master
        label(NULL);
        npart = part_;
        olddbl = 0.0;
        olddbr = 0.0;
        oldrmsdbl = 0.0;
        oldrmsdbr = 0.0;} {}
  }
  Function {draw_master()} {} {
    code {\#define MIN_DB (-48)
        int ox = x();
        int oy = y();
        int lx = w();
        int ly = h();
        float dbl = zynMaster->vuOutPeakL;
        float dbr = zynMaster->vuOutPeakR;
        float rmsdbl = zynMaster->vuRmsPeakL;
        float rmsdbr = zynMaster->vuRmsPeakR;
        float maxdbl = zynMaster->vuMaxOutPeakL;
        float maxdbr = zynMaster->vuMaxOutPeakR;
//        bool clipped = zynMaster->vuClipped;
        dbl = rap2dB(dbl);
        dbr = rap2dB(dbr);
        rmsdbl = rap2dB(rmsdbl);
        rmsdbr = rap2dB(rmsdbr);
        maxdbl = rap2dB(maxdbl);
        maxdbr = rap2dB(maxdbr);
        
        dbl = (MIN_DB - dbl) / MIN_DB;
        if (dbl < 0.0)
            dbl = 0.0;
        else if (dbl > 1.0)
            dbl = 1.0;
        dbr = (MIN_DB - dbr) / MIN_DB;
        if (dbr < 0.0)
            dbr = 0.0;
        else if (dbr > 1.0)
            dbr = 1.0;
        dbl = dbl * 0.4 + olddbl * 0.6;
        dbr = dbr * 0.4 + olddbr * 0.6;
        olddbl = dbl;
        olddbr = dbr;
\#      define VULENX (lx-35)
\#      define VULENY (ly/2-3)
        dbl *= VULENX;
        dbr *= VULENX;

        int idbl = dbl;
        int idbr = dbr;

        // compute RMS - start
        rmsdbl = (MIN_DB - rmsdbl) / MIN_DB;
        if (rmsdbl < 0.0)
            rmsdbl = 0.0;
        else if (rmsdbl > 1.0)
            rmsdbl = 1.0;
        rmsdbr = (MIN_DB - rmsdbr) / MIN_DB;
        if (rmsdbr < 0.0)
            rmsdbr = 0.0;
        else if (rmsdbr > 1.0)
            rmsdbr = 1.0;
        rmsdbl = rmsdbl * 0.4 + oldrmsdbl * 0.6;
        rmsdbr = rmsdbr * 0.4 + oldrmsdbr * 0.6;
        oldrmsdbl = rmsdbl;
        oldrmsdbr = rmsdbr;
        rmsdbl *= VULENX;
        rmsdbr *= VULENX;

        int irmsdbl = rmsdbl;
        int irmsdbr = rmsdbr;
        // compute RMS - end

        // draw db level
        fl_rectf(ox, oy, idbl, VULENY, 0, 200, 255);
        fl_rectf(ox, oy + ly / 2, idbr, VULENY, 0, 200, 255);

        // fill with black
        fl_rectf(ox + idbl, oy, VULENX - idbl, VULENY, 0, 0, 0);
        fl_rectf(ox + idbr, oy + ly / 2, VULENX - idbr, VULENY, 0, 0, 0);

        // draw scale
        float tmp = VULENX * 1.0 / MIN_DB;
        for (int i = 1; i < 1 - MIN_DB; ++i)
        {
           int tx = VULENX + (int)(tmp * i);
           fl_rectf(ox + tx, oy, 1, VULENY + ly / 2, 0, 160, 200);
           if (i % 5 == 0)
               fl_rectf(ox + tx, oy, 1, VULENY + ly / 2, 0, 230, 240);
           if (i % 10 == 0)
               fl_rectf(ox + tx - 1, oy, 2, VULENY + ly / 2, 0, 225, 255);
        }

        // mellow yellow rms indicator
        if (irmsdbl > 2)
            fl_rectf(ox + irmsdbl - 1, oy, 3, VULENY, 255, 255, 0);
        if (irmsdbr > 2)
            fl_rectf(ox + irmsdbr - 1, oy + ly / 2, 3, VULENY, 255, 255, 0);

        // see red if clipped
        if (zynMaster->vuClippedL)
            fl_rectf(ox + VULENX + 2, oy, lx - VULENX - 3, ly / 2 - 3, 250, 10, 10);
        else
            fl_rectf(ox + VULENX + 2, oy, lx - VULENX - 3, ly / 2 - 3, 0, 0, 10);

        if (zynMaster->vuClippedR)
            fl_rectf(ox + VULENX + 2, oy + ly / 2, lx - VULENX - 3, (ly - 2) / 2 - 2, 250, 10, 10);
        else
            fl_rectf(ox + VULENX + 2, oy + ly / 2, lx - VULENX - 3, (ly - 2) / 2 - 2, 0, 0, 10);

        // show maxdB
        static char tmpstr[8];
        const char *dbtag = "dB";
        if ((maxdbl > MIN_DB - 20))
        {
            fl_font(FL_HELVETICA | FL_BOLD, 9);
            fl_color(255, 255, 255);
            //snprintf(tmpstr, 7, "%+3li%s", lrintf(maxdbl + 0.5f), dbtag);
            snprintf(tmpstr, 7, "%+3.f%s", maxdbl + 0.5f, dbtag);
            fl_draw(tmpstr, ox + VULENX + 1, oy + 1,
                    lx - VULENX - 4, VULENY - 2, FL_ALIGN_RIGHT, NULL, 0);
        }
        if ((maxdbr > MIN_DB - 20))
        {
            fl_font(FL_HELVETICA | FL_BOLD, 9);
            fl_color(255, 255, 255);
            //snprintf(tmpstr, 7, "%+3li%s", lrintf(maxdbr + 0.5f), dbtag);
            snprintf(tmpstr, 7, "%+3.f%s", maxdbr + 0.5f, dbtag);
            fl_draw(tmpstr, ox + VULENX + 1, oy + ly / 2 + 1,
                    lx - VULENX - 4, VULENY, FL_ALIGN_RIGHT, NULL, 0);
        }
    } {}
  }
  Function {draw_part()} {} {
    code {\#define MIN_DB (-48)
        int ox = x();
        int oy = y();
        int lx = w();
        int ly = h();
        if (!active_r())
        {
            fl_rectf(ox, oy, lx, ly, 140, 140, 140);
            if (zynMaster->fakepeakpart[npart] > 0)
            {
                int fakedb = zynMaster->fakepeakpart[npart] / 255.0 * ly + 4;
                fl_rectf(ox + 2, oy + ly - fakedb, lx - 4, fakedb, 0, 0, 0);
            }
            return;
        }
        // draw the vu lines
        float db = zynMaster->vuoutpeakpart[npart];
        db = rap2dB(db);

        db = (MIN_DB - db) / MIN_DB;
        db = (db > 1.0) ? 1.0 : db;
        db *= ly - 2;
        int idb = (int) db;

        fl_rectf(ox, oy + ly - idb, lx, idb, 0, 200, 255);
        fl_rectf(ox, oy, lx, ly - idb, 0, 0, 0);

        // draw the scales
        float tmp = ly * 1.0 / MIN_DB;
        for (int i = 1; i < 1 - MIN_DB; ++i)
        {
            int ty = ly + (int)(tmp * i);
            if ( i % 5 == 0)
                fl_rectf(ox, oy + ly - ty, lx, 1, 0, 160, 200);
            if (i % 10 == 0)
                fl_rectf(ox, oy + ly - ty, lx, 1, 0, 230, 240);
        }} {}
  }
  Function {draw()} {open
  } {
    code {if (npart>=0) draw_part();
   else draw_master();} {}
  }
  Function {tickdraw(VUMeter *o)} {return_type {static void}
  } {
    code {o->redraw();} {}
  }
  Function {tick(void *v)} {return_type {static void}
  } {
    code {tickdraw((VUMeter *) v);
        Fl::add_timeout(0.033333333, tick, v); // 1.0 / 30.0 => 30 fps} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {switch(event){
            case FL_SHOW:
                tick(this);
                break;
            case FL_HIDE:
                Fl::remove_timeout(tick, this);
                break;
            case FL_PUSH:
                if (npart < 0) //if (npart >= 0) break;
                    zynMaster->vuresetpeaks();
                break;
        }
        return 1;} {}
  }
  decl {int npart;} {}
  decl {float olddbl;} {}
  decl {float olddbr;} {}
  decl {float oldrmsdbl;} {}
  decl {float oldrmsdbr;} {}
} 

class SysEffSend {: {public WidgetPDial}
} {
  Function {SysEffSend(int x,int y, int w, int h, const char *label=0):WidgetPDial(x,y,w,h,label)} {} {
    code {neff1=0; neff2=0;} {}
  }
  Function {init(int neff1_,int neff2_)} {} {
    code {neff1 = neff1_;
        neff2 = neff2_;
        minimum(0);
        maximum(127);
        step(1);
        labelfont(1);
        labelsize(10);
        align(FL_ALIGN_TOP);
        value(zynMaster->Psysefxsend[neff1][neff2]);
        copy_label((asString(neff1 + 1) + "->" + asString(neff2 + 1)).c_str());} {}
  }
  Function {~SysEffSend()} {} {
    code {hide();} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {if (event == FL_PUSH || event == FL_DRAG)
        {
            zynMaster->setPsysefxsend(neff1,neff2,value());
        }
        return WidgetPDial::handle(event);} {}
  }
  decl {int neff1;} {}
  decl {int neff2;} {}
} 

class Panellistitem {: {public Fl_Group}
} {
  Function {make_window()} {private
  } {
    Fl_Window panellistitem {
      private xywh {315 213 70 260} type Double hide
      class Fl_Group
    } {
      Fl_Group panellistitemgroup {
        private xywh {0 20 70 240} box PLASTIC_THIN_UP_BOX
        code0 {if (zynMaster->part[npart]->Penabled==0) o->deactivate();}
      } {
        Fl_Group {} {
          xywh {45 65 15 110} box ENGRAVED_FRAME
        } {
          Fl_Box {} {
            label {V U}
            xywh {45 65 15 110} box FLAT_BOX color 0 selection_color 75 labelcolor 55 align 128
            code0 {o->init(npart);}
            class VUMeter
          }
        }
        Fl_Button partname {
          label {  }
          callback {if ((int)bankui->cbwig->value() != (npart + 1))
              {
                  bankui->cbwig->value(npart+1);
                  bankui->cbwig->do_callback();
              }
              bankui->Show();}
          xywh {5 27 60 30} box THIN_DOWN_BOX down_box FLAT_BOX labelfont 1 labelsize 10 align 208
        }
        Fl_Slider partvolume {
          callback {zynMaster->part[npart]->setPvolume(o->value());}
          xywh {10 65 30 110} type {Vert Knob} box FLAT_BOX minimum 127 maximum 0 step 1 value 127
          code0 {o->value(zynMaster->part[npart]->Pvolume);}
        }
        Fl_Dial partpanning {
          callback {zynMaster->part[npart]->setPpanning(o->value());}
          xywh {20 180 30 30} maximum 127 step 1
          code0 {o->value(zynMaster->part[npart]->Ppanning);}
          class WidgetPDial
        }
        Fl_Button {} {
          label edit
          callback {if ((int)bankui->cbwig->value() != (npart + 1))
              {
                  bankui->cbwig->value(npart+1);
                  bankui->cbwig->do_callback();
              }}
          xywh {15 235 40 20} box PLASTIC_UP_BOX labelsize 10
        }
        Fl_Choice partrcv {
          callback {zynMaster->part[npart]->Prcvchn=o->value();}
          tooltip {receive from Midi channel} xywh {10 213 50 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
          code0 {for(int i = 0; i < NUM_MIDI_CHANNELS; i++)
            {
                if (i != 9)
                    o->add(string("Ch" + asString(i + 1)).c_str());
                else
                    o->add("Dr10");
            }}
          code1 {o->value(zynMaster->part[npart]->Prcvchn);}
        } {}
      }
      Fl_Check_Button partenabled {
        label 01
        callback {zynMaster->actionLock(lockmute);
            zynMaster->partonoff(npart, o->value());
            zynMaster->actionLock(unlock);
            if (o->value() == 0)
                panellistitemgroup->deactivate();
            else
            {
                panellistitemgroup->activate();
                if ((int)bankui->cbwig->value() != (npart + 1))
                {
                    bankui->cbwig->value(npart + 1);
                    bankui->cbwig->do_callback();
                }
            }
            o->redraw();}
        private xywh {5 0 45 20} down_box DOWN_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 13 align 24
        code0 {string tmp = asString(npart + 1);
            o->copy_label(tmp.c_str());}
        code1 {o->value(zynMaster->part[npart]->Penabled);}
      }
    }
  }
  Function {Panellistitem(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {open
  } {
    code {npart = 0;
        bankui = NULL;} {}
  }
  Function {init(int npart_, BankUI *bankui_)} {open
  } {
    code {npart=npart_;
        bankui = bankui_;
        make_window();
        panellistitem->show();
        end();} {}
  }
  Function {refresh()} {open
  } {
    code {partenabled->value(zynMaster->part[npart]->Penabled);
        if (zynMaster->part[npart]->Penabled != 0)
            panellistitemgroup->activate();
        else
            panellistitemgroup->deactivate();
        partvolume->value(zynMaster->part[npart]->Pvolume);
        partpanning->value(zynMaster->part[npart]->Ppanning);
        partrcv->value(zynMaster->part[npart]->Prcvchn);
        partname->label(zynMaster->part[npart]->Pname.c_str());
        if ((int)bankui->cbwig->value() != (npart + 1))
            panellistitemgroup->color(fl_rgb_color(160, 160, 160));
        else
            panellistitemgroup->color(fl_rgb_color(50,190,240));
        panellistitemgroup->redraw();} {}
  }
  Function {~Panellistitem()} {} {
    code {panellistitem->hide();} {}
  }
  decl {int npart;} {}
  decl {BankUI *bankui;} {}
} 

