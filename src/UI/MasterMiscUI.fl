# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cc}
comment {MasterUI.h} {not_in_source in_header
} 

comment {MasterUI.cc} {in_source not_in_header
} 

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2014, Will Godfrey    

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of the ZynAddSubFX original, modified October 2014
} {in_source in_header
} 

decl {\#include <string>} {public local
} 

decl {using namespace std;} {public local
} 

decl {\#include "ADnoteUI.h"} {public local
} 

decl {\#include "SUBnoteUI.h"} {public local
} 

decl {\#include "EffUI.h"} {public local
} 

decl {\#include "VirKeyboardUI.h"} {public local
} 

decl {\#include "ConfigUI.h"} {public local
} 

decl {\#include "BankUI.h"} {public local
} 

decl {\#include "PartUI.h"} {public local
} 

decl {\#include "MicrotonalUI.h"} {public local
} 

decl {\#include "PresetsUI.h"} {public local
} 

decl {\#include "ParametersUI.h"} {public local
} 

decl {\#include "ConsoleUI.h"} {public local
} 

decl {\#include "Misc/SynthEngine.h"} {public local
} 

decl {\#include "Misc/MiscFuncs.h"} {public local
} 

decl {\#define MIN_DB -48.0} {public local
} 

decl {\#define NO_DB -68.0} {public local
} 

decl {struct{
  int oldpeak[NUM_MIDI_PARTS];
  bool clip[NUM_MIDI_CHANNELS];
  } panelpart;} {private local
} 

class VUMeter {open : {public Fl_Box, private MiscFuncs}
} {
  Function {VUMeter(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {open
  } {
    code {npart=-1;} {}
  }
  Function {init(int part_)} {open
  } {
    code {// the "part_" parameters sets the part (if it is >=0), else it sets the master
    label(NULL);
    npart = part_;
    oldpeakl = 0;
    oldpeakr = 0;
    oldrmsdbl = 0.0;
    oldrmsdbr = 0.0;
    maxdbl = NO_DB;
    maxdbr = NO_DB;
    clipped = 0;
    synth->VUdata.values.vuOutPeakL = 0.0;
    synth->VUdata.values.vuOutPeakR = 0.0;
    synth->VUdata.values.vuRmsPeakL = 0.0;
    synth->VUdata.values.vuRmsPeakR = 0.0;
    for (int i = 0; i < NUM_MIDI_CHANNELS; i++)
    {
        panelpart.oldpeak[i] = 0;
        panelpart.clip[i] = false;
        synth->VUdata.values.parts[i] = 0.0;
    }} {}
  }
  Function {draw_master()} {open
  } {
    code {int ox = x();
    int oy = y();
    int lx = w();
    int ly = h();
    float dbl = rap2dB(synth->VUdata.values.vuOutPeakL);
    float dbr = rap2dB(synth->VUdata.values.vuOutPeakR);
    float rmsdbl = rap2dB(synth->VUdata.values.vuRmsPeakL);
    float rmsdbr = rap2dB( synth->VUdata.values.vuRmsPeakR);
//    clipped |= synth->VUdata.values.vuClipped;

    clipped = clipped | (dbl > 0) | ((dbr > 0) << 1);

    if (dbl > maxdbl)
        maxdbl = dbl;
        if (dbr > maxdbr)
          maxdbr = dbr;
       
        dbl = (MIN_DB - dbl) / MIN_DB;
        if (dbl < 0.0)
            dbl = 0.0;
        else if (dbl > 1.0)
            dbl = 1.0;
        dbr = (MIN_DB - dbr) / MIN_DB;
        if (dbr < 0.0)
            dbr = 0.0;
        else if (dbr > 1.0)
            dbr = 1.0;
\#      define VULENX (lx-35)
\#      define VULENY (ly/2-3)
        dbl *= VULENX;
        dbr *= VULENX;

        if (dbl >= oldpeakl)
            oldpeakl = (int)dbl;
        else if (oldpeakl >= 8)
            oldpeakl -= 8;
        else if (oldpeakl)
            oldpeakl -= 1;
        if (dbr >= oldpeakr)
            oldpeakr = (int)dbr;
        else if (oldpeakr >= 8)
            oldpeakr -= 8;
        else if (oldpeakr)
            oldpeakr -= 1;

        // compute RMS - start
        rmsdbl = ((MIN_DB - rmsdbl) / MIN_DB);
        if (rmsdbl < 0.0)
            rmsdbl = 0.0;
        else if (rmsdbl >  1.0)
            rmsdbl =  1.0;
        rmsdbr = ((MIN_DB - rmsdbr) / MIN_DB);
        if (rmsdbr < 0.0)
            rmsdbr = 0.0;
        else if (rmsdbr >1.0)
            rmsdbr = 1.0;
        rmsdbl = (rmsdbl + oldrmsdbl * 7) / 8;
        rmsdbr = (rmsdbr + oldrmsdbr * 7) / 8;
        oldrmsdbl = rmsdbl;
        oldrmsdbr = rmsdbr;
        int irmsdbl = rmsdbl * VULENX;
        int irmsdbr = rmsdbr * VULENX;
        // compute RMS - end

        // draw db level
        fl_rectf(ox, oy, oldpeakl, VULENY, 0, 200, 255);
        fl_rectf(ox, oy + ly / 2, oldpeakr, VULENY, 0, 200, 255);

        // fill with black
        fl_rectf(ox + oldpeakl, oy, VULENX - oldpeakl, VULENY, 0, 0, 0);
        fl_rectf(ox + oldpeakr, oy + ly / 2, VULENX - oldpeakr, VULENY, 0, 0, 0);

        // draw scale
        float tmp = VULENX * 1.0 / MIN_DB;
        for (int i = 1; i < 1 - MIN_DB; ++i)
        {
           int tx = VULENX + (int)(tmp * i);
           fl_rectf(ox + tx, oy, 1, VULENY + ly / 2, 0, 160, 200);
           if (i % 5 == 0)
               fl_rectf(ox + tx, oy, 1, VULENY + ly / 2, 0, 230, 240);
           if (i % 10 == 0)
               fl_rectf(ox + tx - 1, oy, 2, VULENY + ly / 2, 0, 225, 255);
        }

        // mellow yellow rms indicator
        if (irmsdbl)
            fl_rectf(ox + irmsdbl - 1, oy, 3, VULENY, 255, 255, 0);
        if (irmsdbr)
            fl_rectf(ox + irmsdbr - 1, oy + ly / 2, 3, VULENY, 255, 255, 0);

        // see red if clipped
        if (clipped & 1)
            fl_rectf(ox + VULENX + 2, oy, lx - VULENX - 3, ly / 2 - 3, 250, 10, 10);
        else
            fl_rectf(ox + VULENX + 2, oy, lx - VULENX - 3, ly / 2 - 3, 0, 0, 10);

        if (clipped & 2)
            fl_rectf(ox + VULENX + 2, oy + ly / 2, lx - VULENX - 3, (ly - 2) / 2 - 2, 250, 10, 10);
        else
            fl_rectf(ox + VULENX + 2, oy + ly / 2, lx - VULENX - 3, (ly - 2) / 2 - 2, 0, 0, 10);

        // show maxdB
        static char tmpstr[8];
        const char *dbtag = "dB";
        if ((maxdbl > NO_DB))
        {
            fl_font(FL_HELVETICA | FL_BOLD, 9);
            fl_color(255, 255, 255);
            snprintf(tmpstr, 7, "%+3.f%s", maxdbl + 0.5f, dbtag);
            fl_draw(tmpstr, ox + VULENX + 1, oy + 1,
                    lx - VULENX - 4, VULENY - 2, FL_ALIGN_RIGHT, NULL, 0);
        }
        if ((maxdbr > NO_DB))
        {
            fl_font(FL_HELVETICA | FL_BOLD, 9);
            fl_color(255, 255, 255);
            snprintf(tmpstr, 7, "%+3.f%s", maxdbr + 0.5f, dbtag);
            fl_draw(tmpstr, ox + VULENX + 1, oy + ly / 2 + 1,
                    lx - VULENX - 4, VULENY, FL_ALIGN_RIGHT, NULL, 0);
        }} {}
  }
  Function {draw_part()} {open
  } {
    code {int ox = x()+2;
    int oy = y()+2;
    int lx = w()-4;
    int ly = h()-4;
    float Vpeak = synth->VUdata.values.parts[npart];
    if (Vpeak < 0) // its a fake one
    {
        fl_rectf(ox, oy, lx, ly, 140, 140, 140);
        int fakedb = Vpeak / 127.0 * (ly - 16); // fiddle to make it the same height as normal
        fl_rectf(ox + 2, oy + ly + fakedb, lx - 4, -fakedb, 0, 0, 0);
        return;
    }
        
    if (Vpeak > 1.0)
        panelpart.clip[npart] = true;
 
    // draw the vu lines
    float db = rap2dB(Vpeak);
    db = (MIN_DB - db) / MIN_DB;
    db = (db > 1.0) ? 1.0 : db;
    db = db * ly - 2;
    if (db >= panelpart.oldpeak[npart])
        panelpart.oldpeak[npart] = (int) db;
    else if (panelpart.oldpeak[npart] >= 4)
        panelpart.oldpeak[npart] -= 4;
    else
        panelpart.oldpeak[npart] = 0;
        
    fl_rectf(ox, oy, lx, ly, 0, 0, 0);
    fl_rectf(ox, oy + ly - panelpart.oldpeak[npart], lx, panelpart.oldpeak[npart], 0, 200, 255);

    // draw the scales
    float tmp = ly * 1.0 / MIN_DB;
    for (int i = 1; i < 1 - MIN_DB; ++i)
    {
        int ty = ly + (int)(tmp * i);
        if ( i % 5 == 0)
            fl_rectf(ox, oy + ly - ty, lx, 1, 0, 160, 200);
        if (i % 10 == 0)
            fl_rectf(ox, oy + ly - ty, lx, 1, 0, 230, 240);
    }
    if (panelpart.clip[npart])
        fl_rectf(ox, oy, lx, 4, 255, 0, 0);} {selected
    }
  }
  Function {draw()} {open
  } {
    code {if (npart>=0) draw_part();
    else draw_master();} {}
  }
  Function {tickdraw(VUMeter *o)} {open return_type {static void}
  } {
    code {o->redraw();} {}
  }
  Function {tick(void *v)} {open return_type {static void}
  } {
    code {tickdraw((VUMeter *) v);
    synth->fetchMeterData(&synth->VUdata);
    Fl::add_timeout(0.05, tick, v); // 1.0 / 30.0 => 30 fps} {}
  }
  Function {handle(int event)} {open return_type int
  } {
    code {switch(event){
        case FL_SHOW:
            tick(this);
            break;
        case FL_HIDE:
            Fl::remove_timeout(tick, this);
            break;
        case FL_PUSH:
            if (npart < 0)
            {
                maxdbl = NO_DB;
                maxdbr = NO_DB;
                clipped = 0;
                for (int i = 0; i < NUM_MIDI_CHANNELS; i++)
                    panelpart.clip[i] = false;
            }
            break;
        }
        return 1;} {}
  }
  decl {int npart;} {private local
  }
  decl {float oldrmsdbl;} {private local
  }
  decl {float oldrmsdbr;} {private local
  }
  decl {float maxdbl;} {private local
  }
  decl {float maxdbr;} {private local
  }
  decl {int oldpeakl;} {private local
  }
  decl {int oldpeakr;} {private local
  }
  decl {int clipped;} {private local
  }
} 

class SysEffSend {: {public WidgetPDial, private MiscFuncs}
} {
  Function {SysEffSend(int x,int y, int w, int h, const char *label=0):WidgetPDial(x,y,w,h,label)} {open
  } {
    code {neff1=0; neff2=0;} {}
  }
  Function {init(int neff1_,int neff2_)} {open
  } {
    code {neff1 = neff1_;
        neff2 = neff2_;
        minimum(0);
        maximum(127);
        step(1);
        labelfont(1);
        labelsize(10);
        align(FL_ALIGN_TOP);
        value(synth->Psysefxsend[neff1][neff2]);
        copy_label((asString(neff1 + 1) + "->" + asString(neff2 + 1)).c_str());} {}
  }
  Function {~SysEffSend()} {} {
    code {hide();} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {if (event == FL_PUSH || event == FL_DRAG)
        {
            synth->setPsysefxsend(neff1,neff2,value());
        }
        return WidgetPDial::handle(event);} {}
  }
  decl {int neff1;} {private local
  }
  decl {int neff2;} {private local
  }
} 

class Panellistitem {: {public Fl_Group, private MiscFuncs}
} {
  Function {make_window()} {open private
  } {
    Fl_Window panellistitem {open
      private xywh {315 213 70 280} type Double hide
      class Fl_Group
    } {
      Fl_Group panellistitemgroup {open
        private xywh {0 20 71 258} box PLASTIC_THIN_UP_BOX
        code0 {if (synth->part[npart]->Penabled==0) o->deactivate();}
        code1 {if (Runtime.audioEngine != jack_audio) audiosend->deactivate();}
      } {
        Fl_Group {} {
          xywh {45 65 15 110} box ENGRAVED_FRAME
        } {
          Fl_Box {} {
            label {V U}
            xywh {45 65 15 110} box FLAT_BOX color 0 selection_color 75 labelcolor 55 align 128
            code0 {o->init(npart);}
            class VUMeter
          }
        }
        Fl_Button partname {
          label {  }
          callback {if ((int)bankui->cbwig->value() != (npart + 1))
              {
                  bankui->cbwig->value(npart+1);
                  bankui->cbwig->do_callback();
              }
              bankui->Show();}
          xywh {5 27 60 30} box THIN_DOWN_BOX down_box FLAT_BOX labelfont 1 labelsize 10 align 208
        }
        Fl_Slider partvolume {
          callback {synth->part[npart]->setVolume(o->value());}
          xywh {10 65 30 110} type {Vert Knob} box THIN_DOWN_BOX minimum 127 maximum 0 step 1 value 127
          code0 {o->value(synth->part[npart]->Pvolume);}
        }
        Fl_Dial partpanning {
          callback {synth->part[npart]->SetController(C_panning, (char)o->value());}
          xywh {20 180 30 30} maximum 127 step 1
          code0 {o->value(synth->part[npart]->Ppanning);}
          class WidgetPDial
        }
        Fl_Button {} {
          label edit
          callback {if ((int)bankui->cbwig->value() != (npart + 1))
              {
                  bankui->cbwig->value(npart+1);
                  bankui->cbwig->do_callback();
              }}
          xywh {12 247 40 20} box PLASTIC_UP_BOX labelsize 10
        }
        Fl_Choice partrcv {
          callback {synth->part[npart]->Prcvchn=o->value();}
          tooltip {receive from Midi channel} xywh {8 210 50 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
          code0 {for(int i = 0; i < NUM_MIDI_CHANNELS; i++)
            {
                if (i != 9)
                    o->add(string("Ch" + asString(i + 1)).c_str());
                else
                    o->add("Dr10");
            }}
          code1 {o->value(synth->part[npart]->Prcvchn);}
        } {}
        Fl_Choice audiosend {
          callback {synth->part[npart]->Paudiodest = o->value() + 1;}
          tooltip {Set Audio Destination} xywh {8 229 50 15} box BORDER_BOX down_box BORDER_BOX labelsize 10 textsize 12
          code0 {if (synth->part[npart]->Paudiodest == 2) o->value(1); else if (synth->part[npart]->Paudiodest == 3) o->value(2); else o->value(0);}
        } {
          MenuItem main {
            label Main
            xywh {5 0 34 20} labelsize 12
          }
          MenuItem part {
            label Part
            xywh {5 10 34 20} labelsize 12
          }
          MenuItem both {
            label Both
            xywh {5 20 34 20} labelsize 12
          }
        }
      }
      Fl_Check_Button partenabled {
        label 01
        callback {synth->actionLock(lockmute);
            synth->partonoff(npart, o->value());
            synth->actionLock(unlock);
            if (o->value() == 0)
                panellistitemgroup->deactivate();
            else
            {
                panellistitemgroup->activate();
                if ((int)bankui->cbwig->value() != (npart + 1))
                {
                    bankui->cbwig->value(npart + 1);
                    bankui->cbwig->do_callback();
                }
            }
            o->redraw();}
        private xywh {5 0 45 20} down_box DOWN_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 13 align 24
        code0 {string tmp = asString(npart + 1);
            o->copy_label(tmp.c_str());}
        code1 {o->value(synth->part[npart]->Penabled);}
      }
    }
  }
  Function {Panellistitem(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {npart = 0;
        bankui = NULL;} {}
  }
  Function {init(int npart_, BankUI *bankui_)} {} {
    code {npart=npart_;
        bankui = bankui_;
        make_window();
        panellistitem->show();
        end();} {}
  }
  Function {refresh()} {} {
    code {partenabled->value(synth->part[npart]->Penabled);
        if (synth->part[npart]->Penabled != 0)
            panellistitemgroup->activate();
        else
            panellistitemgroup->deactivate();
        partvolume->value(synth->part[npart]->Pvolume);
        partpanning->value(synth->part[npart]->Ppanning);
        partrcv->value(synth->part[npart]->Prcvchn);
        partname->label(synth->part[npart]->Pname.c_str());
        int tmp = synth->part[npart]->Paudiodest - 1;
        if (tmp < 0 or tmp > 3)
            tmp = 0;
        audiosend->value(tmp);
        if ((int)bankui->cbwig->value() != (npart + 1))
            panellistitemgroup->color(fl_rgb_color(160, 160, 160));
        else
            panellistitemgroup->color(fl_rgb_color(50,190,240));
        panellistitemgroup->redraw();} {}
  }
  Function {~Panellistitem()} {} {
    code {panellistitem->hide();} {}
  }
  decl {int npart;} {private local
  }
  decl {BankUI *bankui;} {private local
  }
} 
