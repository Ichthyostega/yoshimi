From: Ichthyostega <prg@ichthyostega.de>
Date: Wed, 28 Apr 2021 04:39:01 +0200
Subject: Research: Revert Fix inconsistent envelope timing under LV2

This reverts commit 45e963f9a585899ed00c54a40a053f9805f263eb.

- adapted to 2.3.0 (5/23)

Fix inconsistent envelope timing under LV2.
Kristian Amlie<kristian@amlie.name>
Author date: 30.03.21 23:04

    Fix inconsistent envelope timing under LV2.

    The timing values were previously calculated only once, based on the
    static block size. Instead, calculate them on every cycle, based on
    the block size for that cycle.
---
 src/Synth/Envelope.cpp | 36 +++++++++++++++---------------------
 src/Synth/Envelope.h   |  1 +
 2 files changed, 16 insertions(+), 21 deletions(-)

diff --git a/src/Synth/Envelope.cpp b/src/Synth/Envelope.cpp
index d47bb8b..9f645ec 100644
--- a/src/Synth/Envelope.cpp
+++ b/src/Synth/Envelope.cpp
@@ -81,8 +81,16 @@ void Envelope::recomputePoints()
 
     envstretch = powf(440.0f / basefreq, _envpars->Penvstretch / 64.0f);
 
+    float bufferdt = synth->fixed_sample_step_f;
+
     for (int i = 0; i < MAX_ENVELOPE_POINTS; ++i)
     {
+        float tmp = _envpars->getdt(i) / 1000.0f * envstretch;
+        if (tmp > bufferdt)
+            envdt[i] = bufferdt / tmp;
+        else
+            envdt[i] = 2.0f; // any value larger than 1
+
         switch (mode)
         {
             case 2:
@@ -109,6 +117,8 @@ void Envelope::recomputePoints()
                 break;
         }
     }
+
+    envdt[0] = 1.0f;
 }
 
 // Envelope Output
@@ -129,22 +139,16 @@ float Envelope::envout(void)
         return envoutval;
     }
 
-    float bufferdt = synth->sent_buffersize_f / synth->samplerate_f;
-
     if (keyreleased && forcedrelase)
     {   // do the forced release
         size_t tmp = (envsustain == 0) ? (envpoints - 1) : (envsustain + 1);
         // if there is no sustain point, use the last point for release
 
-        float envdt = bufferdt * 1000.0f / (_envpars->getdt(tmp) * envstretch);
-        if (envdt >= 1.0f)
-            envdt = 2.0f; // any value larger than 1
-
-        if (envdt <0.00000001f)
+        if (envdt[tmp] <0.00000001f)
             out = envval[tmp];
         else
             out = envoutval + (envval[tmp] - envoutval) * t;
-        t += envdt * envstretch;
+        t += envdt[tmp] * envstretch;
 
         if (t >= 1.0f)
         {
@@ -156,18 +160,13 @@ float Envelope::envout(void)
         }
         return out;
     }
-
-    float envdt = bufferdt * 1000.0f / (_envpars->getdt(currentpoint) * envstretch);
-    if (envdt >= 1.0f)
-        envdt = 2.0f; // any value larger than 1
-
-    if (envdt >= 1.0f)
+    if (envdt[currentpoint] >= 1.0f)
         out = envval[currentpoint];
     else
         out = envval[currentpoint - 1] + (envval[currentpoint]
               - envval[currentpoint - 1]) * t;
 
-    t += envdt;
+    t += envdt[currentpoint];
     if (t >= 1.0f)
     {
         if (currentpoint >= envpoints - 1)
@@ -198,12 +197,7 @@ float Envelope::envout_dB(void)
         float v2 = decibel(envval[1]);
         out = v1 + (v2 - v1) * t;
 
-        float bufferdt = synth->sent_buffersize_f / synth->samplerate_f;
-        float envdt = bufferdt * 1000.0f / (_envpars->getdt(1) * envstretch);
-        if (envdt >= 1.0f)
-            envdt = 2.0f; // any value larger than 1
-
-        t += envdt;
+        t += envdt[1];
         if (t >= 1.0f)
         {
             t = 0.0f;
diff --git a/src/Synth/Envelope.h b/src/Synth/Envelope.h
index cec7b27..56d0672 100644
--- a/src/Synth/Envelope.h
+++ b/src/Synth/Envelope.h
@@ -47,6 +47,7 @@ class Envelope
         Presets::PresetsUpdate envUpdate;
         size_t envpoints;
         size_t envsustain;   // 0 means disabled
+        float envdt[MAX_ENVELOPE_POINTS];  // milliseconds
         float envval[MAX_ENVELOPE_POINTS]; // [0.0 .. 1.0]
         float envstretch;
         int linearenvelope;
