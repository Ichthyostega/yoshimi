From: willgodfrey <willgodfrey@musically.me.uk>
Date: Sun, 14 May 2023 21:47:29 +0100
Subject: RC-Fix-5 : Adaptive harmonics / Bug in Envelope (see Drumkit)

Latest fixes from release testing integrated as patch

BugFix: adaptive harmonics parameter not updating GUI.
Reverted some recent envelope changes.
In particular it seems size_t creates problems in header files.

Added missing knob default indicators in oscilgen.
Changed ambiguous warning re. use-as-base button.
add in yoshimi.appdata.xml

Set version as 2.3.0 rc5
---
 Changelog                                          |  9 +++-
 desktop/metainfo/yoshimi.appdata.xml               | 63 ++++++++++++++++++++++
 .../files/yoshimi_user_guide_version               |  2 +-
 src/CMakeLists.txt                                 |  2 +-
 src/Misc/ConfBuild.h                               |  2 +-
 src/Params/EnvelopeParams.cpp                      |  6 ++-
 src/Params/EnvelopeParams.h                        |  4 +-
 src/Synth/Envelope.cpp                             |  6 +--
 src/Synth/Envelope.h                               |  6 +--
 src/UI/ADnoteUI.fl                                 |  2 +-
 src/UI/OscilGenUI.fl                               |  7 +--
 11 files changed, 91 insertions(+), 18 deletions(-)
 create mode 100644 desktop/metainfo/yoshimi.appdata.xml

diff --git a/Changelog b/Changelog
index 188f4a5..2ac1787 100644
--- a/Changelog
+++ b/Changelog
@@ -1,6 +1,13 @@
-yoshimi 2.3.0 rc4
+yoshimi 2.3.0 rc5
 
 2023-5-14 Will
+bn 2227
+BugFix: adaptive harmonics parameter not updating GUI.
+Reverted some recent envelope changes.
+Added missing knob default indicators in oscilgen.
+Changed ambiguous warning re. use-as-base button.
+Set version as 2.3.0 rc5
+
 bn 2226
 BugFix: V.keyboard not showing velocity setting in tooltip.
 BugFix: Formant filter frequency reset not using float.
diff --git a/desktop/metainfo/yoshimi.appdata.xml b/desktop/metainfo/yoshimi.appdata.xml
new file mode 100644
index 0000000..890e182
--- /dev/null
+++ b/desktop/metainfo/yoshimi.appdata.xml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Copyright 2016-2023 Yoshimi project <willgodfrey@musically.me.uk> -->
+<component type="desktop-application">
+  <id>net.sourceforge.projects.yoshimi.desktop</id>
+  <metadata_license>CC-BY-4.0</metadata_license>
+  <project_license>GPL-2.0+</project_license>
+  <content_rating type="oars-1.1" />
+  <name>Yoshimi</name>
+  <summary>A Software Synthesizer for Linux</summary>
+  <icon>https://a.fsdn.com/allura/p/yoshimi/icon</icon>
+  <description>
+    <p>
+    Yoshimi is a MIDI software synthesizer for Linux. It synthesizes in real time, can run polyphonic and/or monophonic in multiple simultaneous patches in one or more MIDI channels and has broad microtonal capability. It includes extensive additive, subtractive, and PAD synth capabilities which can be run simultaneously within the same patch. It also has comprehensive effects capabilities.
+    </p>
+    <p>
+    Originally based on the 2.4.0 version of ZynAddSubFX (Copyright 2002-2009 Nasca Octavian Paul), development of Yoshimi has continued for quite a while now in its own direction. Originally these included major optimizations for audio and MIDI performance. More recently there has been progressive development of user-level access to all controls, including command line access. Since V1.5.0 there is full Midi Learn capability.
+    </p>
+    <p>
+    In the V1.7.x series ALSA MIDI can search for and connect to all viable sources, almost all controls have been made realtime, both key and channel aftertouch have been implemented and there is now the ability to change the panning law. Refinement continues, both visually and within the code.
+    </p>
+    <p>
+    Version 2.0 brings fully resizable windows, MIDI sync for LFOs, and extensions to panning control.
+    </p>
+    <p>
+    Version 2.1.0 extends MIDI sync for Effects where relevant, and adds extensions to NRPNs. There is also a new HTML User Guide.
+    </p>
+    <p>
+    Version 2.2.0 sees a major revision of the PadSynth engine allowing significant morphing of the wavetables in real-time.
+    </p>
+  </description>
+  <releases>
+​    <release type="stable" version="2.3.0" date="2023-5-12" />
+​  </releases>
+  <provides>
+    <binary>yoshimi</binary>
+  </provides>
+
+  <screenshots>
+    <screenshot type="default">
+       <image>https://a.fsdn.com/con/app/proj/yoshimi/screenshots/Main.png</image>
+       <caption>The main window showing Yoshimi running</caption>
+    </screenshot>
+    <screenshot>
+       <image>https://a.fsdn.com/con/app/proj/yoshimi/screenshots/Mixer.png</image>
+       <caption>Yoshimi in action</caption>
+    </screenshot>
+    <screenshot>
+       <image>https://a.fsdn.com/con/app/proj/yoshimi/screenshots/MidiLearn.png</image>
+       <caption>The MIDI-learn window.</caption>
+    </screenshot>
+  </screenshots>
+  <categories>
+     <category>Audio</category>
+     <category>Midi</category>
+     <category>Music</category>
+  </categories>
+  <keywords>
+    <keyword>Synthesizer</keyword>
+    <keyword>Softsynth</keyword>
+  </keywords>
+  <url type="homepage">https://sourceforge.net/projects/yoshimi/</url>
+  <url type="help">http://yoshimi.github.io/docs/user-guide/</url>
+</component>
diff --git a/doc/yoshimi_user_guide/files/yoshimi_user_guide_version b/doc/yoshimi_user_guide/files/yoshimi_user_guide_version
index fb999fe..a71cf6c 100644
--- a/doc/yoshimi_user_guide/files/yoshimi_user_guide_version
+++ b/doc/yoshimi_user_guide/files/yoshimi_user_guide_version
@@ -1 +1 @@
-2.3.0 rc4
\ No newline at end of file
+2.3.0 rc5
\ No newline at end of file
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 84e9fc2..bc6b7e7 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -51,7 +51,7 @@ add_definitions(-Wextra)
 add_definitions(-Wno-vla) # Nothing wrong with variable length arrays
 # ^^^ comment these out on release pushes
 
-set (YOSHIMI_VERSION "2.3.0 rc4")
+set (YOSHIMI_VERSION "2.3.0 rc5")
 
 add_definitions (-DMIN_CONFIG_MAJOR=2)
 add_definitions (-DMIN_CONFIG_MINOR=0)
diff --git a/src/Misc/ConfBuild.h b/src/Misc/ConfBuild.h
index d3bf8c1..0675a50 100644
--- a/src/Misc/ConfBuild.h
+++ b/src/Misc/ConfBuild.h
@@ -2,4 +2,4 @@
     ConfBuild.h
 */
 
-#define BUILD_NUMBER 2226
+#define BUILD_NUMBER 2227
diff --git a/src/Params/EnvelopeParams.cpp b/src/Params/EnvelopeParams.cpp
index f37b1e5..640b39d 100644
--- a/src/Params/EnvelopeParams.cpp
+++ b/src/Params/EnvelopeParams.cpp
@@ -231,7 +231,8 @@ void EnvelopeParams::add2XML(XMLwrapper *xml)
         for (size_t i=0; i<Penvpoints; ++i)
         {
             xml->beginbranch("POINT",i);
-            if (i > 0) xml->addparcombi("dt",Penvdt[i]);
+            if (i > 0)
+                xml->addparcombi("dt",Penvdt[i]);
             xml->addparcombi("val",Penvval[i]);
             xml->endbranch();
         }
@@ -259,7 +260,8 @@ void EnvelopeParams::getfromXML(XMLwrapper *xml)
     for (size_t i=0;i<Penvpoints;i++)
     {
         if (xml->enterbranch("POINT",i)==0) continue;
-        if (i > 0) Penvdt[i]=xml->getparcombi("dt",Penvdt[i], 0,127);
+        if (i > 0)
+            Penvdt[i]=xml->getparcombi("dt",Penvdt[i], 0,127);
         Penvval[i]=xml->getparcombi("val",Penvval[i], 0,127);
         xml->exitbranch();
     }
diff --git a/src/Params/EnvelopeParams.h b/src/Params/EnvelopeParams.h
index 17d20c9..a9c0b52 100644
--- a/src/Params/EnvelopeParams.h
+++ b/src/Params/EnvelopeParams.h
@@ -55,8 +55,8 @@ class EnvelopeParams : public Presets
 
         // MIDI Parameters
         unsigned char Pfreemode;       // 1 if it is in free mode or 0 if it is in ADSR or ASR mode (comment from original author)
-        size_t Penvpoints;             // stays < MAX_ENVELOPE_POINTS
-        size_t Penvsustain;            // 0 means disabled  -- see Envelope::envout()
+        unsigned char Penvpoints;      // stays < MAX_ENVELOPE_POINTS
+        float Penvsustain;            // 0 means disabled  -- see Envelope::envout()
         float Penvdt[MAX_ENVELOPE_POINTS];
         float Penvval[MAX_ENVELOPE_POINTS];
         unsigned char Penvstretch;     // 64=normal stretch (piano-like), 0=no stretch
diff --git a/src/Synth/Envelope.cpp b/src/Synth/Envelope.cpp
index 19361c8..08c1af7 100644
--- a/src/Synth/Envelope.cpp
+++ b/src/Synth/Envelope.cpp
@@ -42,7 +42,7 @@ Envelope::Envelope(EnvelopeParams *envpars, float basefreq_, SynthEngine *_synth
     envpoints = envpars->Penvpoints;
     if (envpoints > MAX_ENVELOPE_POINTS)
         envpoints = MAX_ENVELOPE_POINTS;
-    envsustain =  envpars->Penvsustain;
+    envsustain = (envpars->Penvsustain == 0) ? -1 :envpars->Penvsustain;
     forcedrelase = envpars->Pforcedrelease;
     linearenvelope = envpars->Plinearenvelope;
 
@@ -133,7 +133,7 @@ float Envelope::envout(void)
 
     if (keyreleased && forcedrelase)
     {   // do the forced release
-        size_t tmp = (envsustain == 0) ? (envpoints - 1) : (envsustain + 1);
+        int tmp = (envsustain < 0) ? (envpoints - 1) : (envsustain + 1);
         // if there is no sustain point, use the last point for release
 
         float envdt = bufferdt * 1000.0f / (_envpars->getdt(tmp) * envstretch);
@@ -151,7 +151,7 @@ float Envelope::envout(void)
             currentpoint = envsustain + 2;
             forcedrelase = 0;
             t = 0.0f;
-            if (currentpoint >= envpoints || envsustain == 0)
+            if (currentpoint >= envpoints || envsustain < 0)
                 envfinish = 1;
         }
         return out;
diff --git a/src/Synth/Envelope.h b/src/Synth/Envelope.h
index cec7b27..34a905b 100644
--- a/src/Synth/Envelope.h
+++ b/src/Synth/Envelope.h
@@ -45,8 +45,8 @@ class Envelope
     private:
         EnvelopeParams *_envpars;
         Presets::PresetsUpdate envUpdate;
-        size_t envpoints;
-        size_t envsustain;   // 0 means disabled
+        int envpoints;
+        int envsustain;   // 0 means disabled
         float envval[MAX_ENVELOPE_POINTS]; // [0.0 .. 1.0]
         float envstretch;
         int linearenvelope;
@@ -55,7 +55,7 @@ class Envelope
         int forcedrelase;
         char keyreleased;    // if the key was released
         char envfinish;
-        size_t currentpoint; // current envelope point (starts from 1)
+        int currentpoint;    // current envelope point (starts from 1)
         float t;             // the time from the last point
         float envoutval;     // used to do the forced release
 
diff --git a/src/UI/ADnoteUI.fl b/src/UI/ADnoteUI.fl
index f3d0154..0c28129 100644
--- a/src/UI/ADnoteUI.fl
+++ b/src/UI/ADnoteUI.fl
@@ -235,7 +235,7 @@ class ADvoicelistitem {: {public Fl_Group}
         voiceenabled->value(pars->VoicePar[nvoice].Enabled);
         voiceresonanceenabled->value(pars->VoicePar[nvoice].Presonance);
         voicevolume->value(pars->VoicePar[nvoice].PVolume);
-        voicevolume->selection_color(setKnob(voicevolume->value(),100));
+        voicevolume->selection_color(setSlider(voicevolume->value(),100));
         voicedetune->value(pars->VoicePar[nvoice].PDetune - 8192);
         //voicedetune->selection_color(setSlider(voicedetune->value(),100));
         voicepanning->value(pars->VoicePar[nvoice].PPanning);
diff --git a/src/UI/OscilGenUI.fl b/src/UI/OscilGenUI.fl
index e0abc4d..046c418 100644
--- a/src/UI/OscilGenUI.fl
+++ b/src/UI/OscilGenUI.fl
@@ -637,7 +637,7 @@ o->hide();}
       Fl_Button useasbase {
         label {Use as base}
         callback {//
-        if (choice(synth, "", "Yes", "No", "Clear the harmonics settings?\\nThis action is not easily reversed and may cause strange Undo/Redo behaviour.") < 2)
+        if (choice(synth, "", "Yes", "No", "Make this a base function?\\nThis action is not easily reversed and may cause strange Undo/Redo behaviour.") < 2)
             return;
         send_data(TOPLEVEL::action::forceUpdate, OSCILLATOR::control::useAsBaseFunction, autoclearbutton->value() > 0, TOPLEVEL::type::Integer);}
         tooltip {Use this Oscillator as base function} xywh {5 313 85 20} box THIN_UP_BOX labelfont 1 labelsize 11 labelcolor 64
@@ -978,8 +978,8 @@ o->hide();}
                         h[i]->phase->value(0);
                         h[i]->phase->selection_color(setSlider(0,0));
                     }
+                    h[0]->mag->value(-63);
                     harmonicshiftcounter->value(0);
-                    h[0]->mag->value(0);
                     wshbutton->value(0);
                     fltbutton->value(0);
                     sabutton->value(0);
@@ -1270,7 +1270,8 @@ o->hide();}
     adhrbf->selection_color(setKnob(adhrbf->value(),128));
     adhrpow->value(oscil->Padaptiveharmonicspower);
     adhrpow->selection_color(setKnob(adhrpow->value(),100));
-    adhrtype->value(oscil->Padaptiveharmonicspar);
+    adhrpar->value(oscil->Padaptiveharmonicspar);
+    adhrpar->selection_color(setSlider(adhrpar->value(),50));
 
     h[0]->refresh(-63);
     for (int i=1;i<MAX_AD_HARMONICS;i++)
