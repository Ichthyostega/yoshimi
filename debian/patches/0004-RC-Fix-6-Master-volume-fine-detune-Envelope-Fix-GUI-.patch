From: willgodfrey <willgodfrey@musically.me.uk>
Date: Tue, 16 May 2023 12:27:21 +0100
Subject: RC-Fix-6 : Master volume / fine detune/ Envelope Fix / GUI fixes

Latest fixes from release testing integrated as patch

Applied patch from Hermann for correct Envelope behaviour.
Changed Master volume and fine detune to parcombi.
    Detune required a change in Interchange.cpp as indirectTransfers
    assumed all values were integers.
Changed Default and Current theme boxes to unresponsive buttons.
    This was so long names are clipped and don't spill over
Updated Envelope Limits.
Updated LFO Limits.
Updated Filter Limits.
Applied corrections to User Guide.
Set version as 2.3.0 rc6
---
 Changelog                                               | 13 ++++++++++++-
 doc/yoshimi_user_guide/add/voice.html                   |  2 +-
 doc/yoshimi_user_guide/config/config.html               |  2 +-
 doc/yoshimi_user_guide/files/yoshimi_user_guide_version |  2 +-
 doc/yoshimi_user_guide/filter/filter.html               |  4 ++--
 doc/yoshimi_user_guide/wave/wave.html                   |  2 +-
 src/CMakeLists.txt                                      |  2 +-
 src/Interface/InterChange.cpp                           | 15 ++++++++++-----
 src/Interface/InterChange.h                             |  2 +-
 src/Misc/ConfBuild.h                                    |  2 +-
 src/Misc/Microtonal.cpp                                 |  4 ++--
 src/Misc/SynthEngine.cpp                                |  4 ++--
 src/Params/EnvelopeParams.cpp                           |  5 ++++-
 src/Params/EnvelopeParams.h                             |  4 ++--
 src/Params/FilterParams.cpp                             | 13 ++++++++++++-
 src/Params/LFOParams.cpp                                |  6 ++++++
 src/Synth/Envelope.cpp                                  | 10 +++++-----
 src/Synth/Envelope.h                                    |  6 +++---
 src/UI/ConfigUI.fl                                      | 14 +++++++-------
 src/UI/MasterUI.fl                                      |  6 +++---
 src/UI/WidgetPDial.cpp                                  |  2 +-
 21 files changed, 78 insertions(+), 42 deletions(-)

diff --git a/Changelog b/Changelog
index 2ac1787..d80c627 100644
--- a/Changelog
+++ b/Changelog
@@ -1,4 +1,15 @@
-yoshimi 2.3.0 rc5
+yoshimi 2.3.0 rc6
+
+2023-5-16 Will
+bn 2228
+Applied patch from Hermann for correct Envelope behaviour.
+Changed Master volume and fine detune to parcombi.
+Changed Default and Current theme boxes to unresponsive buttons.
+Updated Envelope Limits.
+Updated LFO Limits.
+Updated Filter Limits.
+Applied corrections to User Guide.
+Set version as 2.3.0 rc6
 
 2023-5-14 Will
 bn 2227
diff --git a/doc/yoshimi_user_guide/add/voice.html b/doc/yoshimi_user_guide/add/voice.html
index d0e0c70..ce07f1b 100644
--- a/doc/yoshimi_user_guide/add/voice.html
+++ b/doc/yoshimi_user_guide/add/voice.html
@@ -36,7 +36,7 @@
     <br><br>
     <b>Minus</b> This inverts the phase of the entire voice so it will tend to subtract from the others.
     <br><br>
-    <b>Bend</b> Modifies the range of an income pitch bend for just this voice relative to the rest, and can also make it go in the reverse direction.
+    <b>Bend</b> Modifies the range of an incoming pitch bend for just this voice relative to the rest, and can also make it go in the reverse direction.
     <br><br>
     <b>Offset</b> Shifts the overall pitch (up or down) for this voice.
     <br><br>
diff --git a/doc/yoshimi_user_guide/config/config.html b/doc/yoshimi_user_guide/config/config.html
index 99147f1..b2ad289 100644
--- a/doc/yoshimi_user_guide/config/config.html
+++ b/doc/yoshimi_user_guide/config/config.html
@@ -15,9 +15,9 @@
     Some of these settings don't apply when running as an LV2 plugin, and mostly these are either hidden completely or shown as inactive.
     <h3>Main Settings</h3>
 
+    <b>Internal Buffer Size</b> Lower values will give lower latency and more accurate resolution, but at the cost of CPU loading. We recommend you keep this as low as possible without getting Xruns.
     <b>AddSynth Oscillator Size</b> The bigger this is the better the quality. However that is at the cost of CPU loading.
     <br><br>
-    <b>Internal Buffer Size</b> Lower values will give lower latency and more accurate resolution, but at the cost of CPU loading. We recommend you keep this as low as possible without getting Xruns.
     <br><br>
     <a id="PadSynthInterpolation"><b>PadSynth Interpolation</b></a> Relevant when transposing to notes far away from the nominal frequency of the wavetable. For those with good hearing at high pitches, setting this to 'Cubic' will give very slightly better results, but it is slower to operate.
     <br><br>
diff --git a/doc/yoshimi_user_guide/files/yoshimi_user_guide_version b/doc/yoshimi_user_guide/files/yoshimi_user_guide_version
index a71cf6c..470e74b 100644
--- a/doc/yoshimi_user_guide/files/yoshimi_user_guide_version
+++ b/doc/yoshimi_user_guide/files/yoshimi_user_guide_version
@@ -1 +1 @@
-2.3.0 rc5
\ No newline at end of file
+2.3.0 rc6
\ No newline at end of file
diff --git a/doc/yoshimi_user_guide/filter/filter.html b/doc/yoshimi_user_guide/filter/filter.html
index eeb4aeb..2d86063 100644
--- a/doc/yoshimi_user_guide/filter/filter.html
+++ b/doc/yoshimi_user_guide/filter/filter.html
@@ -60,7 +60,7 @@
         <b>Formants</b> The number of active formants.
       </li>
       <li>
-        <b>Fr.Sl</b> (formant slowness) The rate at which one formant morphs to the next.
+        <b>Fr.Sl</b> (formant slowness) The rate at which one vowel morphs to the next.
       </li>
       <li>
         <b>Vw.Cl</b> (vowel clearness) The amount of overlap when vowels transition.
@@ -104,7 +104,7 @@
     </ul>
     <b>Note</b>
     <div class="tab">
-    Although the sequence size sets the number of active vowels it doesn't detirmine which ones can be selected for any sequence position. If you have three vowels active (the default) you could have vowels 6, 3, 4 at positions 1, 2, 3 respectively.
+    Although the sequence size sets the number of active vowels it doesn't determine which ones can be selected for any sequence position. If you have three vowels active (the default) you could have vowels 6, 3, 4 at positions 1, 2, 3 respectively.
     </div>
     </p>
     <p>
diff --git a/doc/yoshimi_user_guide/wave/wave.html b/doc/yoshimi_user_guide/wave/wave.html
index 6343bbb..80dac98 100644
--- a/doc/yoshimi_user_guide/wave/wave.html
+++ b/doc/yoshimi_user_guide/wave/wave.html
@@ -16,7 +16,7 @@
     <p>
     At the top there are a pair of graphic views. On the left is the complete oscillator with all filters and harmonic effects applied, and on the right the basic wave it is derived from.
     <br><br>
-    The narrow imags at the top are the harmonic distribution. Each vertical bar represents one actual harmonic. This is most obvious with a sinewave base.
+    The narrow images at the top are the harmonic distribution. Each vertical bar represents one actual harmonic. This is most obvious with a sinewave base.
     <br><br>
     The larger image below is a more familiar waveform as would be displayed on an oscilloscope.
     <br><br>
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index bc6b7e7..27f88bd 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -51,7 +51,7 @@ add_definitions(-Wextra)
 add_definitions(-Wno-vla) # Nothing wrong with variable length arrays
 # ^^^ comment these out on release pushes
 
-set (YOSHIMI_VERSION "2.3.0 rc5")
+set (YOSHIMI_VERSION "2.3.0 rc6")
 
 add_definitions (-DMIN_CONFIG_MAJOR=2)
 add_definitions (-DMIN_CONFIG_MINOR=0)
diff --git a/src/Interface/InterChange.cpp b/src/Interface/InterChange.cpp
index 95bbc62..65e806c 100644
--- a/src/Interface/InterChange.cpp
+++ b/src/Interface/InterChange.cpp
@@ -296,6 +296,7 @@ std::string InterChange::manualSearch(std::string dir2search, std::string path2m
 void InterChange::indirectTransfers(CommandBlock *getData, bool noForward)
 {
     int value = lrint(getData->data.value);
+    float valuef = -1;
     unsigned char type = getData->data.type;
     unsigned char control = getData->data.control;
     unsigned char switchNum = getData->data.part;
@@ -426,7 +427,7 @@ void InterChange::indirectTransfers(CommandBlock *getData, bool noForward)
             break;
 
         case TOPLEVEL::section::main:
-            value = indirectMain(getData, synth, newMsg, guiTo, text);
+            value = indirectMain(getData, synth, newMsg, guiTo, text, valuef);
             break;
 
         case TOPLEVEL::section::bank: // instrument / bank
@@ -457,7 +458,10 @@ void InterChange::indirectTransfers(CommandBlock *getData, bool noForward)
         value = textMsgBuffer.push(text);
     // TODO need to improve message handling for multiple receivers
 
-    getData->data.value = float(value);
+    if (valuef > -1)
+        getData->data.value = valuef; // curently only master fine detune
+    else
+        getData->data.value = float(value);
     if (write)
         lowPrioWrite = false;
     if (noForward)
@@ -659,7 +663,7 @@ int InterChange::indirectScales(CommandBlock *getData, SynthEngine *synth, unsig
 }
 
 
-int InterChange::indirectMain(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text)
+int InterChange::indirectMain(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text, float &valuef)
 {
     bool write = (getData->data.type & TOPLEVEL::type::Write);
     int value = getData->data.value;
@@ -673,11 +677,12 @@ int InterChange::indirectMain(CommandBlock *getData, SynthEngine *synth, unsigne
             if (write)
             {
                 add2undo(getData, noteSeen);
-                synth->microtonal.Pglobalfinedetune = value;
+                valuef = getData->data.value;
+                synth->microtonal.Pglobalfinedetune =valuef;
                 synth->setAllPartMaps();
             }
             else
-                value = synth->microtonal.Pglobalfinedetune;
+                valuef = synth->microtonal.Pglobalfinedetune;
             break;
         }
         case MAIN::control::keyShift:
diff --git a/src/Interface/InterChange.h b/src/Interface/InterChange.h
index 1e124dc..8f4e1fb 100644
--- a/src/Interface/InterChange.h
+++ b/src/Interface/InterChange.h
@@ -110,7 +110,7 @@ class InterChange : private DataText
         int indirectVector(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text);
         int indirectMidi(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text);
         int indirectScales(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text);
-        int indirectMain(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text);
+        int indirectMain(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text, float &valuef);
         int indirectBank(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text);
         int indirectConfig(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text);
         int indirectPart(CommandBlock *getData, SynthEngine *synth, unsigned char &newMsg, bool &guiTo, std::string &text);
diff --git a/src/Misc/ConfBuild.h b/src/Misc/ConfBuild.h
index 0675a50..7dc9570 100644
--- a/src/Misc/ConfBuild.h
+++ b/src/Misc/ConfBuild.h
@@ -2,4 +2,4 @@
     ConfBuild.h
 */
 
-#define BUILD_NUMBER 2227
+#define BUILD_NUMBER 2228
diff --git a/src/Misc/Microtonal.cpp b/src/Misc/Microtonal.cpp
index b13db3e..f5c79a5 100644
--- a/src/Misc/Microtonal.cpp
+++ b/src/Misc/Microtonal.cpp
@@ -668,7 +668,7 @@ void Microtonal::add2XML(XMLwrapper *xml)
     xml->addpar("invert_up_down_center", Pinvertupdowncenter);
 
     xml->addparbool("enabled", Penabled);
-    xml->addpar("global_fine_detune", lrint(Pglobalfinedetune));
+    xml->addparcombi("global_fine_detune", Pglobalfinedetune);
 
     xml->addpar("a_note", PrefNote);
     xml->addparreal("a_freq", PrefFreq);
@@ -728,7 +728,7 @@ void Microtonal::getfromXML(XMLwrapper *xml)
     Pinvertupdowncenter=xml->getpar127("invert_up_down_center", Pinvertupdowncenter);
 
     Penabled=xml->getparbool("enabled", Penabled);
-    Pglobalfinedetune = xml->getpar127("global_fine_detune", Pglobalfinedetune);
+    Pglobalfinedetune = xml->getparcombi("global_fine_detune", Pglobalfinedetune, 0, 127);
 
     PrefNote = xml->getpar127("a_note", PrefNote);
     PrefFreq = xml->getparreal("a_freq", PrefFreq, 1.0, 10000.0);
diff --git a/src/Misc/SynthEngine.cpp b/src/Misc/SynthEngine.cpp
index d6c7a84..4d4c941 100644
--- a/src/Misc/SynthEngine.cpp
+++ b/src/Misc/SynthEngine.cpp
@@ -3113,7 +3113,7 @@ void SynthEngine::add2XML(XMLwrapper *xml)
     xml->beginbranch("MASTER");
     xml->addpar("current_midi_parts", Runtime.NumAvailableParts);
     xml->addpar("panning_law", Runtime.panLaw);
-    xml->addpar("volume", Pvolume);
+    xml->addparcombi("volume", Pvolume);
     xml->addpar("key_shift", Pkeyshift);
     xml->addparreal("bpm_fallback", PbpmFallback);
     xml->addpar("channel_switch_type", Runtime.channelSwitchType);
@@ -3260,7 +3260,7 @@ bool SynthEngine::getfromXML(XMLwrapper *xml)
     }
     Runtime.NumAvailableParts = xml->getpar("current_midi_parts", NUM_MIDI_CHANNELS, NUM_MIDI_CHANNELS, NUM_MIDI_PARTS);
     Runtime.panLaw = xml->getpar("panning_law", Runtime.panLaw, MAIN::panningType::cut, MAIN::panningType::boost);
-    setPvolume(xml->getpar127("volume", Pvolume));
+    setPvolume(xml->getparcombi("volume", Pvolume, 0, 127));
     setPkeyshift(xml->getpar("key_shift", Pkeyshift, MIN_KEY_SHIFT + 64, MAX_KEY_SHIFT + 64));
     PbpmFallback = xml->getparreal("bpm_fallback", PbpmFallback, BPM_FALLBACK_MIN, BPM_FALLBACK_MAX);
     Runtime.channelSwitchType = xml->getpar("channel_switch_type", Runtime.channelSwitchType, 0, 5);
diff --git a/src/Params/EnvelopeParams.cpp b/src/Params/EnvelopeParams.cpp
index 640b39d..8121cc8 100644
--- a/src/Params/EnvelopeParams.cpp
+++ b/src/Params/EnvelopeParams.cpp
@@ -320,7 +320,6 @@ float envelopeLimit::getEnvelopeLimits(CommandBlock *getData)
     int min = 0;
     int max = 127;
     float def = 64;
-    type |= TOPLEVEL::type::Integer;
     unsigned char learnable = TOPLEVEL::type::Learnable;
     type |= learnable;
 
@@ -366,10 +365,12 @@ float envelopeLimit::getEnvelopeLimits(CommandBlock *getData)
                     def = ENVDEF::ampStretch.def;
                     break;
                 case ENVELOPEINSERT::control::forcedRelease:
+                    type |= TOPLEVEL::type::Integer;
                     def = ENVSWITCH::defForce;
                     type &= ~learnable;
                     break;
                 case ENVELOPEINSERT::control::linearEnvelope:
+                    type |= TOPLEVEL::type::Integer;
                     max = 1;
                     def = ENVSWITCH::defLinear;
                     type &= ~learnable;
@@ -377,9 +378,11 @@ float envelopeLimit::getEnvelopeLimits(CommandBlock *getData)
                 //case ENVELOPEINSERT::control::edit:
                     //break;
                 case ENVELOPEINSERT::control::enableFreeMode:
+                    type |= TOPLEVEL::type::Integer;
                     def = ENVSWITCH::defFreeMode;
                     break;
                 case ENVELOPEINSERT::control::points:
+                    type |= TOPLEVEL::type::Integer;
                     def = ENVDEF::count.def;
                     break;
                 case ENVELOPEINSERT::control::sustainPoint:
diff --git a/src/Params/EnvelopeParams.h b/src/Params/EnvelopeParams.h
index a9c0b52..17d20c9 100644
--- a/src/Params/EnvelopeParams.h
+++ b/src/Params/EnvelopeParams.h
@@ -55,8 +55,8 @@ class EnvelopeParams : public Presets
 
         // MIDI Parameters
         unsigned char Pfreemode;       // 1 if it is in free mode or 0 if it is in ADSR or ASR mode (comment from original author)
-        unsigned char Penvpoints;      // stays < MAX_ENVELOPE_POINTS
-        float Penvsustain;            // 0 means disabled  -- see Envelope::envout()
+        size_t Penvpoints;             // stays < MAX_ENVELOPE_POINTS
+        size_t Penvsustain;            // 0 means disabled  -- see Envelope::envout()
         float Penvdt[MAX_ENVELOPE_POINTS];
         float Penvval[MAX_ENVELOPE_POINTS];
         unsigned char Penvstretch;     // 64=normal stretch (piano-like), 0=no stretch
diff --git a/src/Params/FilterParams.cpp b/src/Params/FilterParams.cpp
index 8121ec9..2c559b8 100644
--- a/src/Params/FilterParams.cpp
+++ b/src/Params/FilterParams.cpp
@@ -407,7 +407,6 @@ float filterLimit::getFilterLimits(CommandBlock *getData)
     int min = 0;
     int max = 127;
     float def = 64;
-    //type |= TOPLEVEL::type::Integer;
     unsigned char learnable = TOPLEVEL::type::Learnable;
     type |= learnable;
 
@@ -449,6 +448,7 @@ float filterLimit::getFilterLimits(CommandBlock *getData)
             def = FILTDEF::gain.def;
             break;
         case FILTERINSERT::control::stages:
+            type |= TOPLEVEL::type::Integer;
             if (effType == EFFECT::type::dynFilter)
                 def = FILTDEF::dynStages.def;
             else
@@ -457,21 +457,25 @@ float filterLimit::getFilterLimits(CommandBlock *getData)
             type &= ~learnable;
             break;
         case FILTERINSERT::control::baseType:
+            type |= TOPLEVEL::type::Integer;
             max = FILTDEF::category.max;
             def = FILTDEF::category.def;
             type &= ~learnable;
             break;
         case FILTERINSERT::control::analogType:
+            type |= TOPLEVEL::type::Integer;
             max = FILTDEF::analogType.max;
             def = FILTDEF::analogType.def;
             type &= ~learnable;
             break;
         case FILTERINSERT::control::stateVariableType:
+            type |= TOPLEVEL::type::Integer;
             max = FILTDEF::stVarfType.max;
             def = FILTDEF::stVarfType.def;
             type &= ~learnable;
             break;
         case FILTERINSERT::control::frequencyTrackingRange:
+            type |= TOPLEVEL::type::Integer;
             max = true;
             def = FILTSWITCH::trackRange;
             type &= ~learnable;
@@ -506,36 +510,43 @@ float filterLimit::getFilterLimits(CommandBlock *getData)
             def = FILTDEF::formOctave.def;
             break;
         case FILTERINSERT::control::numberOfFormants:
+            type |= TOPLEVEL::type::Integer;
             min = FILTDEF::formCount.min;
             max = FILTDEF::formCount.max;
             def = FILTDEF::formCount.def;
             type &= ~learnable;
             break;
         case FILTERINSERT::control::vowelNumber:
+            type |= TOPLEVEL::type::Integer;
             max = FILTDEF::formVowel.max;
             def = FILTDEF::formVowel.def;
             type &= ~learnable;
             break;
         case FILTERINSERT::control::formantNumber:
+            type |= TOPLEVEL::type::Integer;
             max = FILTDEF::formCount.max;
             def = FILTDEF::formCount.def;
             type &= ~learnable;
             break;
         case FILTERINSERT::control::sequenceSize:
+            type |= TOPLEVEL::type::Integer;
             min = FILTDEF::sequenceSize.min;
             max = FILTDEF::sequenceSize.max;
             def = FILTDEF::sequenceSize.def;
             type &= ~learnable;
             break;
         case FILTERINSERT::control::sequencePosition:
+            type |= TOPLEVEL::type::Integer;
             def = 0;
             type &= ~learnable;
             break;
         case FILTERINSERT::control::vowelPositionInSequence:
+            type |= TOPLEVEL::type::Integer;
             max = 5;
             type &= ~learnable;
             break;
         case FILTERINSERT::control::negateInput:
+            type |= TOPLEVEL::type::Integer;
             max = true;
             def =FILTSWITCH::sequenceReverse;
             type &= ~learnable;
diff --git a/src/Params/LFOParams.cpp b/src/Params/LFOParams.cpp
index dfbad65..66139a6 100644
--- a/src/Params/LFOParams.cpp
+++ b/src/Params/LFOParams.cpp
@@ -176,6 +176,7 @@ float LFOlimit::getLFOlimits(CommandBlock *getData)
             }
             break;
         case LFOINSERT::control::depth:
+        type &= ~TOPLEVEL::type::Integer;
             if (engine >= PART::engine::addVoice1)
             {
                 switch(insertType)
@@ -196,16 +197,19 @@ float LFOlimit::getLFOlimits(CommandBlock *getData)
             }
             break;
         case LFOINSERT::control::delay:
+            type &= ~TOPLEVEL::type::Integer;
             if (engine >= PART::engine::addVoice1 && insertType == TOPLEVEL::insertType::amplitude)
                 def = LFODEF::voiceAmpDelay.def;
             else
                 def = LFODEF::delay.def;
             break;
         case LFOINSERT::control::start:
+            type &= ~TOPLEVEL::type::Integer;
             if (engine < PART::engine::addVoice1 || insertType != TOPLEVEL::insertType::frequency)
                 def = LFODEF::start.def;
             break;
         case LFOINSERT::control::amplitudeRandomness:
+            type &= ~TOPLEVEL::type::Integer;
             def = LFODEF::ampRnd.def;
             break;
         case LFOINSERT::control::type:
@@ -224,9 +228,11 @@ float LFOlimit::getLFOlimits(CommandBlock *getData)
             type &= ~learnable;
             break;
         case LFOINSERT::control::frequencyRandomness:
+            type &= ~TOPLEVEL::type::Integer;
             def = LFODEF::freqRnd.def;
             break;
         case LFOINSERT::control::stretch:
+            type &= ~TOPLEVEL::type::Integer;
             def = LFODEF::stretch.def;
             break;
 
diff --git a/src/Synth/Envelope.cpp b/src/Synth/Envelope.cpp
index 08c1af7..d47bb8b 100644
--- a/src/Synth/Envelope.cpp
+++ b/src/Synth/Envelope.cpp
@@ -42,7 +42,7 @@ Envelope::Envelope(EnvelopeParams *envpars, float basefreq_, SynthEngine *_synth
     envpoints = envpars->Penvpoints;
     if (envpoints > MAX_ENVELOPE_POINTS)
         envpoints = MAX_ENVELOPE_POINTS;
-    envsustain = (envpars->Penvsustain == 0) ? -1 :envpars->Penvsustain;
+    envsustain =  envpars->Penvsustain;
     forcedrelase = envpars->Pforcedrelease;
     linearenvelope = envpars->Plinearenvelope;
 
@@ -123,7 +123,7 @@ float Envelope::envout(void)
         envoutval = envval[envpoints - 1];
         return envoutval;
     }
-    if (currentpoint == envsustain + 1 && !keyreleased)
+    if (currentpoint == envsustain + 1 && !keyreleased && (envsustain != 0))
     {   // if it is sustaining now
         envoutval = envval[envsustain];
         return envoutval;
@@ -133,7 +133,7 @@ float Envelope::envout(void)
 
     if (keyreleased && forcedrelase)
     {   // do the forced release
-        int tmp = (envsustain < 0) ? (envpoints - 1) : (envsustain + 1);
+        size_t tmp = (envsustain == 0) ? (envpoints - 1) : (envsustain + 1);
         // if there is no sustain point, use the last point for release
 
         float envdt = bufferdt * 1000.0f / (_envpars->getdt(tmp) * envstretch);
@@ -148,10 +148,10 @@ float Envelope::envout(void)
 
         if (t >= 1.0f)
         {
-            currentpoint = envsustain + 2;
+            currentpoint = tmp + 1;
             forcedrelase = 0;
             t = 0.0f;
-            if (currentpoint >= envpoints || envsustain < 0)
+            if (currentpoint >= envpoints || envsustain == 0)
                 envfinish = 1;
         }
         return out;
diff --git a/src/Synth/Envelope.h b/src/Synth/Envelope.h
index 34a905b..cec7b27 100644
--- a/src/Synth/Envelope.h
+++ b/src/Synth/Envelope.h
@@ -45,8 +45,8 @@ class Envelope
     private:
         EnvelopeParams *_envpars;
         Presets::PresetsUpdate envUpdate;
-        int envpoints;
-        int envsustain;   // 0 means disabled
+        size_t envpoints;
+        size_t envsustain;   // 0 means disabled
         float envval[MAX_ENVELOPE_POINTS]; // [0.0 .. 1.0]
         float envstretch;
         int linearenvelope;
@@ -55,7 +55,7 @@ class Envelope
         int forcedrelase;
         char keyreleased;    // if the key was released
         char envfinish;
-        int currentpoint;    // current envelope point (starts from 1)
+        size_t currentpoint; // current envelope point (starts from 1)
         float t;             // the time from the last point
         float envoutval;     // used to do the forced release
 
diff --git a/src/UI/ConfigUI.fl b/src/UI/ConfigUI.fl
index a1b074e..6a8a6c5 100644
--- a/src/UI/ConfigUI.fl
+++ b/src/UI/ConfigUI.fl
@@ -74,7 +74,7 @@ class ConfigUI {} {
     Fl_Window configwindow {
       label {Yoshimi Settings}
       callback {close->do_callback();}
-      xywh {1157 24 390 330} type Double hide resizable
+      xywh {1226 24 390 330} type Double hide resizable
       code0 {o->copy_label(synth->makeUniqueName("Settings").c_str());}
       code1 {if (synth->getIsLV2Plugin()){jackTab->deactivate();alsaTab->deactivate();}}
       code2 {confDW = o->w();confDH = o->h();}
@@ -850,9 +850,9 @@ send_data (0, CONFIG::control::alsaMidiType, o->value(), TOPLEVEL::type::Integer
             label {Default Theme}
             xywh {288 115 35 17} labelsize 12 labelcolor 64
           }
-          Fl_Box storedTheme {
+          Fl_Button storedTheme {
             label {Default Theme}
-            xywh {255 132 100 20} box THIN_DOWN_BOX color 7 labelsize 12 labelcolor 64
+            xywh {255 132 100 20} box THIN_DOWN_BOX color 7 selection_color 7 labelsize 12 align 64
           }
           Fl_Group nuTheme {
             xywh {242 158 123 106} deactivate
@@ -861,10 +861,6 @@ send_data (0, CONFIG::control::alsaMidiType, o->value(), TOPLEVEL::type::Integer
               label {Current Theme}
               xywh {288 168 35 17} labelsize 12 labelcolor 64
             }
-            Fl_Box currentTheme {
-              label {Current Theme}
-              xywh {255 187 100 20} box THIN_DOWN_BOX color 7 labelsize 12 labelcolor 64
-            }
             Fl_Button setAsStored {
               label {Make Default}
               callback {//
@@ -876,6 +872,10 @@ send_data (0, CONFIG::control::alsaMidiType, o->value(), TOPLEVEL::type::Integer
         nuTheme->deactivate();}
               xywh {255 220 100 20} box PLASTIC_THIN_UP_BOX color 228 labelsize 12 labelcolor 64
             }
+            Fl_Button currentTheme {
+              label {Current Theme}
+              xywh {255 187 100 20} box THIN_DOWN_BOX color 7 selection_color 7 labelsize 12 labelcolor 64 align 64
+            }
           }
         }
         Fl_Box patch1 {
diff --git a/src/UI/MasterUI.fl b/src/UI/MasterUI.fl
index 21c2020..6e93ef2 100644
--- a/src/UI/MasterUI.fl
+++ b/src/UI/MasterUI.fl
@@ -821,8 +821,8 @@ class MasterUI {: {private GuiUpdates}
           label Detune
           callback {//
           o->selection_color(setKnob(o->value(),64));
-          send_data(TOPLEVEL::action::lowPrio, MAIN::control::detune, o->value(), TOPLEVEL::type::Integer, TOPLEVEL::section::main);}
-          tooltip {Global Fine Detune} xywh {280 32 40 40} box ROUND_UP_BOX color 29 labelsize 10 labelcolor 64 maximum 127 step 1 value 64
+          send_data(TOPLEVEL::action::lowPrio, MAIN::control::detune, o->value(), 0, TOPLEVEL::section::main);}
+          tooltip {Global Fine Detune} xywh {280 32 40 40} box ROUND_UP_BOX color 29 labelsize 10 labelcolor 64 maximum 127 value 64
           code0 {o->setValueType(VC_GlobalFineDetune);}
           code1 {o->value(synth->microtonal.Pglobalfinedetune);}
           code2 {o->selection_color(setKnob(o->value(),64));}
@@ -852,7 +852,7 @@ class MasterUI {: {private GuiUpdates}
           callback {//
           o->selection_color(setKnob(o->value(),90));
           send_data(0, MAIN::control::volume, o->value(), 0, TOPLEVEL::section::main);}
-          tooltip {Master Volume} xywh {331 32 40 40} box ROUND_UP_BOX color 29 labelsize 10 labelcolor 64 maximum 127 step 1
+          tooltip {Master Volume} xywh {331 32 40 40} box ROUND_UP_BOX color 29 labelsize 10 labelcolor 64 maximum 127
           code0 {o->setValueType(VC_MasterVolume);}
           code1 {o->value(synth->Pvolume);}
           code2 {o->selection_color(setKnob(o->value(),90));}
diff --git a/src/UI/WidgetPDial.cpp b/src/UI/WidgetPDial.cpp
index 1053c55..2eafa6d 100644
--- a/src/UI/WidgetPDial.cpp
+++ b/src/UI/WidgetPDial.cpp
@@ -130,7 +130,7 @@ int WidgetPDial::handle(int event)
         my = - Fl::event_dy();
         dragsize = 25.0f;
         if (Fl::event_state(FL_CTRL) != 0)
-            dragsize *= 10;
+            dragsize *= 5; // halved this for better fine resolution
         value(limit(value() + my / dragsize * (max - min), min, max));
         value_damage();
         if (this->when() != 0)
