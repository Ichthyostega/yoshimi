---- Installing yoshimi ----

Before doing this, check the "Dependencies" file and make sure you have all of the entries in place. You will need to do this as the root user.

It's a normal CMake build.

---- Sample instructions to compile/build using ccmake on Linux, outside-source-tree -----

This uses "yoshimi-1.5.1" as an example, and should work fine with all other versions. It is an easy way to build/compile using ccmake, in a separate build directory.  This way, changes to source code can be readily compared without combing through the build-related files.

We will assume you have a home directory called 'user' and want Yoshimi to reside in a directory called 'software', but downloaded the archive to /home/user/download.

Working from a terminal window, extract source code archive:

    mkdir /home/user/software
    cd    /home/user/download
    tar -jxvf /home/user/download/yoshimi-1.5.1.tar.bz2 -C/home/user/software

Now there should be a directory:

   /home/user/software/yoshimi-1.5.1

First move into this with:

    cd /home/user/software/yoshimi-1.5.1

Now create a 'build' directory with:

    mkdir build

and move into it with:

    cd build

"/home/user/software/yoshimi-1.5.1/src" is the source code directory.
"/home/user/software/yoshimi-1.5.1/build" is now the current working directory, and will have make-related files (when ccmake is done with configuring and generates the files).

Run ccmake:

   ccmake ../src

Note the two dots!

Within ccmake, type 'c' (without the quotes) to generate a default configuration.

At this point, unless you have specific requirements we suggest you use the 'down' arrow to move the cursor to 'BuildForThisCPU' then hit 'Return'. This will optimise for your machine.

Type 'c' again to actually apply the current configuration data (repeat multiple times if needed).  If there are any missing pre-requisite libraries and/or software (dependencies), it should prompt you with such info.  You can install such dependencies and try these ccmake configuration steps again.

When ccmake configuration is complete, there should be a new option displayed: 'g' to generate (the make-related files) and exit.

In other words, if you already have all dependencies in place, then when you run ccmake, just try 'c', then 'c' again, when 'g' appears as a choice, type 'g'.  The make-related files are created in the current directory, and ccmake is done.  You are now back at the command line.

Next is to compile (build) the application:

   make

If you have a multi-core processor, and know how many cores there are you can speed up compiling by entering:

    make -j{n}
where {n} is the number of cores.

When compilation is completed successfully, install it (as root) with:

   make install

By default the yoshimi image is then copied to /usr/local/bin

Yoshimi will in fact run anywhere in userspace, which can be convenient as an alternative to installing it - especially when comparing different built versions.  In this case banks and presets will only be in the yoshimi directory.

For more fine tuned building see INSTALL_CUSTOM

---- Build and command line options ----

Yoshimi builds with both Jack and Alsa audio and midi options.  Alsa is the default for both audio and midi.  However, if this is not available Yoshimi will try for Jack.  These, and other options can be nominated at runtime via command line parameters, and via the Graphical User Interface and Command Line Interface.

---- Instrument banks ----

Yoshimi installs its own copy of the instrument banks (installed by default in usr/local/share/yoshimi/banks/).  On first time startup, it also looks to the standard zynaddsubfx bank directories and includes any that may exist there.  You can tune your choice of bank directories via "Instruments" or "Paths".

---- Help ----

If you get stuck, ask for help on LAU or
  <http://www.freelists.org/list/yoshimi>.
